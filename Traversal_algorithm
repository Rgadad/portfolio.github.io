#include <iostream>
#include <vector>
#include <queue>
#include <stack>
using namespace std;

void BFS(int start, vector<vector<int>>& graph, int vertices) {
    vector<bool> visited(vertices, false);
    queue<int> q;

    visited[start] = true;
    q.push(start);

    while (!q.empty()) {
        int current = q.front();
        q.pop();
        cout << current << " ";

        for (int neighbor : graph[current]) {
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

void DFS(int start, vector<vector<int>>& graph, vector<bool>& visited) {
    visited[start] = true;
    cout << start << " ";

    for (int neighbor : graph[start]) {
        if (!visited[neighbor]) {
            DFS(neighbor, graph, visited);
        }
    }
}

int main() {
    int vertices = 5;
    vector<vector<int>> graph(vertices);

    // Example adjacency list representation of a graph
    graph[0] = {1, 2};
    graph[1] = {0, 3, 4};
    graph[2] = {0};
    graph[3] = {1};
    graph[4] = {1};

    cout << "BFS Traversal: ";
    BFS(0, graph, vertices);

    cout << "\nDFS Traversal: ";
    vector<bool> visited(vertices, false);
    DFS(0, graph, visited);

    return 0;
}
